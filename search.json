[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "main",
    "section": "",
    "text": "This is main page for Compuational Finance.\n\n\n\n\n\n\n   \n     \n     \n       Order By\n       Default\n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Title\n        \n         \n          Author\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\nDate\n\n\nTitle\n\n\nAuthor\n\n\n\n\n\n\nFeb 26, 2023\n\n\nFE 621 Homework 1 with R\n\n\nEric Wang\n\n\n\n\nFeb 26, 2023\n\n\nFE 621 Homework 1 with python\n\n\nEric Wang\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "hw1/hw1_r.html",
    "href": "hw1/hw1_r.html",
    "title": "FE 621 Homework 1 with R",
    "section": "",
    "text": "# newton method\nnewton <- function(f, df, x0, tol = 0.001, N.max = 200){\n  for (n in 1:N.max) {\n    x1 <- x0 - f(x0) / df(x0)\n    if(is.na(x1)) return(NA)\n    if(abs(x1-x0) < tol){\n      break\n    }\n    x0 <- x1\n  }\n  return(x1)\n}\n\n\n# BS Model\nBS.model <- function(type = 'call', S0, K, T1, sigma, r) {\n  d1 <- (log(S0 / K) + (r + 0.5 * sigma ^ 2) * T1) / (sigma * sqrt(T1))\n  d2 <- d1 - sigma * sqrt(T1)\n  if (type == 'call') {\n    return (S0 * pnorm(d1) - exp(-r * T1) * K * pnorm(d2))\n  }\n  else if (type == 'put') {\n    return (-S0 * pnorm(-d1) + exp(-r * T1) * K * pnorm(-d2))\n  }\n}\n\n# vega\nVega <- function(S0, K, T1, sigma, r) {\n  d1 <- (log(S0 / K) + (r + 0.5 * sigma ^ 2) * T1) / (sigma * sqrt(T1))\n  sqrt(T1) * S0 * dnorm(d1)\n}"
  },
  {
    "objectID": "hw1/hw1_r.html#define-wrapper-function-for-calculating-implied-volatility",
    "href": "hw1/hw1_r.html#define-wrapper-function-for-calculating-implied-volatility",
    "title": "FE 621 Homework 1 with R",
    "section": "Define wrapper function for calculating implied volatility",
    "text": "Define wrapper function for calculating implied volatility\n\n# vol\nimplied.vol <- function(type = 'call', S0, K, T1, r, P) {\n  price.diff <- function(sigma) {\n    BS.model(type, S0, K, T1, sigma, r) - P\n  }\n  dprice.diff <- function(sigma)\n    Vega(S0, K, T1, sigma, r)\n  return (newton(price.diff, dprice.diff, 0.25))\n}\n\n# to calculate implied volatility for all options\ncalc <- function(x, T1){\n  # add a column of price \n  x$calls$Price <- 0.5*(x$calls$Bid + x$calls$Ask) \n  x$puts$Price <- 0.5*(x$puts$Bid + x$puts$Ask)\n  \n  # add a column of implied volatility \n  call.func <- function(K,P)implied.vol('call', S0, K, T1, r, P)\n  put.func <- function(K,P)implied.vol('put', S0, K, T1, r, P)\n  \n  x$calls$ImpliedVol <- mapply(call.func, x$calls$Strike, x$calls$Price)\n  x$puts$ImpliedVol <- mapply(put.func, x$puts$Strike, x$puts$Price)\n  \n  # delete columns \n  x$calls <- x$calls[c(\"Bid\",\"Ask\",\"Strike\",\"Price\",\"ImpliedVol\")]\n  x$puts <- x$puts[c(\"Bid\",\"Ask\",\"Strike\",\"Price\", \"ImpliedVol\")]\n  return(x)\n}"
  },
  {
    "objectID": "hw1/hw1_r.html#download-all-option-data",
    "href": "hw1/hw1_r.html#download-all-option-data",
    "title": "FE 621 Homework 1 with R",
    "section": "Download all option data",
    "text": "Download all option data\n\nlibrary(quantmod)\nSPY.options.all <- getOptionChain(\"^SPX\", NULL)# all options \nmaturities.SPY <- names(SPY.options.all)# all maturities \nT.vec <- (as.Date(maturities.SPY,\"%b.%d.%Y\")-Sys.Date())/365 \nT.vec <- as.numeric(T.vec)# all time to maturities\nS0 <- getQuote(\"^SPX\")$Last\nr <- 4.58 / 100"
  },
  {
    "objectID": "hw1/hw1_r.html#calculation-and-visualization",
    "href": "hw1/hw1_r.html#calculation-and-visualization",
    "title": "FE 621 Homework 1 with R",
    "section": "Calculation and visualization",
    "text": "Calculation and visualization\n\nSPY.options.all <-\n  mapply(calc, SPY.options.all, T.vec, SIMPLIFY = FALSE)\n\nplot(\n  NA,\n  xlim = c(3000, 5000),\n  ylim = c(0, 1),\n  xlab = \"Strike\",\n  ylab = \"ImpliedVol\"\n)\nlines(\n  SPY.options.all$Mar.03.2023$puts$Strike,\n  SPY.options.all$Mar.03.2023$puts$ImpliedVol,\n  col = 'red'\n)\nlines(\n  SPY.options.all$Jul.31.2023$puts$Strike,\n  SPY.options.all$Jul.31.2023$puts$ImpliedVol,\n  col = 'blue'\n)\nlines(\n  SPY.options.all$Nov.17.2023$puts$Strike,\n  SPY.options.all$Nov.17.2023$puts$ImpliedVol,\n  col = 'green'\n)\nlegend(\n  \"topright\",\n  c(\"Mar.03.2023\", \"Jul.31.2023\", \"Nov.17.2023\"),\n  fill = c(\"red\", \"blue\", \"green\")\n)"
  },
  {
    "objectID": "hw1/hw1_python.html",
    "href": "hw1/hw1_python.html",
    "title": "FE 621 Homework 1 with python",
    "section": "",
    "text": "import numpy as np\nfrom scipy.stats import norm\nimport warnings\nwarnings.filterwarnings(\"ignore\", category=RuntimeWarning) # used for IV calculation, ignore divide by zero warning\n\n\ndef bs(*params):\n    S, K, r, sigma, T, q, option_type = params\n    d1 = (np.log(S / K) + (r - q + 0.5 * sigma**2) * T) / (sigma * np.sqrt(T))\n    d2 = d1 - sigma * np.sqrt(T)\n    if option_type == \"call\":\n        return S * np.exp(-q * T) * norm.cdf(d1) - K * np.exp(-r * T) * norm.cdf(d2)\n    if option_type == \"put\":\n        return K * np.exp(-r * T) * norm.cdf(-d2) - S * np.exp(-q * T) * norm.cdf(-d1)\n    else:\n        raise (\"option_type must be 'call' or 'put'\")\n\ndef vega(*params):\n    S, K, r, sigma, T, q = params\n    d1 = (np.log(S / K) + (r - q + 0.5 * sigma**2) * T) / (sigma * np.sqrt(T))\n    return S * np.exp(-q * T) * norm.pdf(d1) * np.sqrt(T)"
  },
  {
    "objectID": "hw1/hw1_python.html#download-data",
    "href": "hw1/hw1_python.html#download-data",
    "title": "FE 621 Homework 1 with python",
    "section": "Download data",
    "text": "Download data\n\nimport yfinance as yf\nimport pandas as pd\nimport numpy as np\n\ndef get_spx_data(date:str):\n    \"\"\"Download SPX option data and stock price, doing necessary data cleaning\n\n    Args:\n        date (str): option expiration date\n    \"\"\"\n    spx = yf.Ticker(\"^SPX\")\n    opt_data = spx.option_chain(spy_opt_dates[0])\n    df = opt_data.calls.append(opt_data.puts)\n    df[\"close\"] = spx.history().iloc[-1, :][\"Close\"]\n    df[\"div\"] = spx.history().iloc[-1, :][\"Dividends\"]\n    df[\"date\"] = date\n    df['type'] = df['contractSymbol'].apply(lambda x: \"call\" if x.find(\"C\") != -1 else \"put\")\n    df['mid'] = (df['bid'] + df['ask']) / 2\n    df['T'] = (pd.to_datetime(date) - pd.Timestamp.today()).days / 252\n    return df\n\nspy = yf.Ticker(\"^SPX\")\nopt_dates = np.array(spy.options)\nspy_opt_dates = opt_dates[[10, 15, 20, 24, 27]]\ntest = get_spx_data(spy_opt_dates[4])\ntest.head()\n\n/var/folders/96/q3xdlgtd7x9c__b7vz9jl9lh0000gn/T/ipykernel_27998/639117605.py:13: FutureWarning:\n\nThe frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n\n\n\n\n\n\n\n  \n    \n      \n      contractSymbol\n      lastTradeDate\n      strike\n      lastPrice\n      bid\n      ask\n      change\n      percentChange\n      volume\n      openInterest\n      impliedVolatility\n      inTheMoney\n      contractSize\n      currency\n      close\n      div\n      date\n      type\n      mid\n      T\n    \n  \n  \n    \n      0\n      SPXW230313C03300000\n      2023-02-09 21:03:50+00:00\n      3300.0\n      790.76\n      669.6\n      675.4\n      0.0\n      0.0\n      NaN\n      0\n      0.491247\n      True\n      REGULAR\n      USD\n      3970.040039\n      0.0\n      2023-07-21\n      call\n      672.50\n      0.571429\n    \n    \n      1\n      SPXW230313C03400000\n      2023-02-07 21:00:10+00:00\n      3400.0\n      770.94\n      571.3\n      574.6\n      0.0\n      0.0\n      NaN\n      18\n      0.411810\n      True\n      REGULAR\n      USD\n      3970.040039\n      0.0\n      2023-07-21\n      call\n      572.95\n      0.571429\n    \n    \n      2\n      SPXW230313C03500000\n      2023-02-21 15:43:29+00:00\n      3500.0\n      538.02\n      471.9\n      475.2\n      0.0\n      0.0\n      2.0\n      0\n      0.355323\n      True\n      REGULAR\n      USD\n      3970.040039\n      0.0\n      2023-07-21\n      call\n      473.55\n      0.571429\n    \n    \n      3\n      SPXW230313C03600000\n      2023-02-07 18:44:03+00:00\n      3600.0\n      514.20\n      373.3\n      376.4\n      0.0\n      0.0\n      3.0\n      12\n      0.302680\n      True\n      REGULAR\n      USD\n      3970.040039\n      0.0\n      2023-07-21\n      call\n      374.85\n      0.571429\n    \n    \n      4\n      SPXW230313C03650000\n      2023-02-14 20:47:44+00:00\n      3650.0\n      501.76\n      324.6\n      327.7\n      0.0\n      0.0\n      NaN\n      0\n      0.280464\n      True\n      REGULAR\n      USD\n      3970.040039\n      0.0\n      2023-07-21\n      call\n      326.15\n      0.571429"
  },
  {
    "objectID": "hw1/hw1_python.html#calculate-iv-and-visulization",
    "href": "hw1/hw1_python.html#calculate-iv-and-visulization",
    "title": "FE 621 Homework 1 with python",
    "section": "Calculate IV and Visulization",
    "text": "Calculate IV and Visulization\n\ndef calc_imp_vol2(x):\n    S, K, T, q, option_type, market_price = x[\n        [\"close\", \"strike\", \"T\", \"div\", \"type\", \"mid\"]\n    ].values\n    r = 0.0458\n    vol = 0.8\n    for _ in range(200):\n        vol = vol - (bs(S, K, r, vol, T, q, option_type) - market_price) / vega(\n            S, K, r, vol, T, q\n        )\n        if abs(bs(S, K, r, vol, T, q, option_type) - market_price) < 1e-6:\n            return vol\n    return vol\n\n\ntest[\"my_vol\"] = test.apply(calc_imp_vol2, axis=1)\ntest.tail()\n\n\n\n\n\n  \n    \n      \n      contractSymbol\n      lastTradeDate\n      strike\n      lastPrice\n      bid\n      ask\n      change\n      percentChange\n      volume\n      openInterest\n      ...\n      inTheMoney\n      contractSize\n      currency\n      close\n      div\n      date\n      type\n      mid\n      T\n      my_vol\n    \n  \n  \n    \n      94\n      SPXW230313P04300000\n      2023-02-17 17:01:47+00:00\n      4300.0\n      236.94\n      323.7\n      329.4\n      0.0\n      0.0\n      1.0\n      5\n      ...\n      True\n      REGULAR\n      USD\n      3970.040039\n      0.0\n      2023-07-21\n      put\n      326.55\n      0.571429\n      0.161223\n    \n    \n      95\n      SPXW230313P04400000\n      2023-02-15 18:07:37+00:00\n      4400.0\n      271.78\n      423.3\n      429.0\n      0.0\n      0.0\n      2.0\n      8\n      ...\n      True\n      REGULAR\n      USD\n      3970.040039\n      0.0\n      2023-07-21\n      put\n      426.15\n      0.571429\n      0.188935\n    \n    \n      96\n      SPXW230313P04500000\n      2023-02-07 18:44:03+00:00\n      4500.0\n      389.80\n      523.1\n      528.8\n      0.0\n      0.0\n      3.0\n      4\n      ...\n      True\n      REGULAR\n      USD\n      3970.040039\n      0.0\n      2023-07-21\n      put\n      525.95\n      0.571429\n      0.214912\n    \n    \n      97\n      SPXW230313P04800000\n      2023-02-13 15:52:26+00:00\n      4800.0\n      663.48\n      822.4\n      828.2\n      0.0\n      0.0\n      NaN\n      1\n      ...\n      True\n      REGULAR\n      USD\n      3970.040039\n      0.0\n      2023-07-21\n      put\n      825.30\n      0.571429\n      0.285007\n    \n    \n      98\n      SPXW230313P05000000\n      2023-02-14 15:48:26+00:00\n      5000.0\n      874.55\n      1022.1\n      1027.8\n      0.0\n      0.0\n      200.0\n      350\n      ...\n      True\n      REGULAR\n      USD\n      3970.040039\n      0.0\n      2023-07-21\n      put\n      1024.95\n      0.571429\n      0.327228\n    \n  \n\n5 rows × 21 columns\n\n\n\nSimply plot IV versus strike:\n\nimport matplotlib.pyplot as plt\nplt.scatter(test[test[\"type\"]==\"put\"]['strike'], test[test[\"type\"]==\"put\"]['impliedVolatility'], label='market impliedVolatility')\nplt.scatter(test[test[\"type\"]==\"put\"]['strike'], test[test[\"type\"]==\"put\"]['my_vol'], label='my_vol')\nplt.ylim((0, 1))\nplt.legend()\nplt.show()"
  }
]