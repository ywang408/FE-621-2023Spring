---
title: FE 621 Homework 1 with python
author: Eric Wang
date: today
html:
    toc: true
    cold-fold: false
---

## Black-Scholes formula and Vega

```{python}
import numpy as np
from scipy.stats import norm
import warnings
warnings.filterwarnings("ignore", category=RuntimeWarning) # used for IV calculation, ignore divide by zero warning


def bs(*params):
    S, K, r, sigma, T, q, option_type = params
    d1 = (np.log(S / K) + (r - q + 0.5 * sigma**2) * T) / (sigma * np.sqrt(T))
    d2 = d1 - sigma * np.sqrt(T)
    if option_type == "call":
        return S * np.exp(-q * T) * norm.cdf(d1) - K * np.exp(-r * T) * norm.cdf(d2)
    if option_type == "put":
        return K * np.exp(-r * T) * norm.cdf(-d2) - S * np.exp(-q * T) * norm.cdf(-d1)
    else:
        raise ("option_type must be 'call' or 'put'")

def vega(*params):
    S, K, r, sigma, T, q = params
    d1 = (np.log(S / K) + (r - q + 0.5 * sigma**2) * T) / (sigma * np.sqrt(T))
    return S * np.exp(-q * T) * norm.pdf(d1) * np.sqrt(T)
```

## Download data

```{python}
import yfinance as yf
import pandas as pd
import numpy as np

def get_spx_data(date:str):
    """Download SPX option data and stock price, doing necessary data cleaning

    Args:
        date (str): option expiration date
    """
    spx = yf.Ticker("^SPX")
    opt_data = spx.option_chain(spy_opt_dates[0])
    df = opt_data.calls.append(opt_data.puts)
    df["close"] = spx.history().iloc[-1, :]["Close"]
    df["div"] = spx.history().iloc[-1, :]["Dividends"]
    df["date"] = date
    df['type'] = df['contractSymbol'].apply(lambda x: "call" if x.find("C") != -1 else "put")
    df['mid'] = (df['bid'] + df['ask']) / 2
    df['T'] = (pd.to_datetime(date) - pd.Timestamp.today()).days / 252
    return df

spy = yf.Ticker("^SPX")
opt_dates = np.array(spy.options)
spy_opt_dates = opt_dates[[10, 15, 20, 24, 27]]
test = get_spx_data(spy_opt_dates[4])
test.head()
```

## Calculate IV and Visulization

```{python}
def calc_imp_vol2(x):
    S, K, T, q, option_type, market_price = x[
        ["close", "strike", "T", "div", "type", "mid"]
    ].values
    r = 0.0458
    vol = 0.8
    for _ in range(200):
        vol = vol - (bs(S, K, r, vol, T, q, option_type) - market_price) / vega(
            S, K, r, vol, T, q
        )
        if abs(bs(S, K, r, vol, T, q, option_type) - market_price) < 1e-6:
            return vol
    return vol


test["my_vol"] = test.apply(calc_imp_vol2, axis=1)
test.tail()
```

Simply plot IV versus strike:

```{python}
import matplotlib.pyplot as plt
plt.scatter(test[test["type"]=="put"]['strike'], test[test["type"]=="put"]['impliedVolatility'], label='market impliedVolatility')
plt.scatter(test[test["type"]=="put"]['strike'], test[test["type"]=="put"]['my_vol'], label='my_vol')
plt.ylim((0, 1))
plt.legend()
plt.show()
```